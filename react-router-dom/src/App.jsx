// react-router-dom
// 페이지 이동을 구현할 수 있게 해주는 패키지

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 패키지 설치
// yarn add react-router-dom

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 사용 방법 순서

// 1. 페이지 컴포넌트 생성
// src 폴더 > pages 폴더 > 하위 파일 생성
// 1-1) Home
// 1-2) About
// 1-3) Contact
// 1-4) Works

// 2. Router.jsx 생성 및 router 설정 코드 작성
// src 폴더 > shared 폴더 > Router.jsx 폴더 생성
// 브라우저에 우리가 URL을 입력하고 이동했을 때, 우리가 원하는 페이지 컴포넌트로 이동하게끔 만드는 부분이다.
// URL 1개 당 페이지 컴포넌트를 매칭해주는 것으로, 한 개의 URL을 Route라고 한다.

// 3. App.jsx에 import 및 적용
// App 컴포넌트에 넣어주는 이유는 우리가 만든 프로젝트에서 가장 최상위에 존재하는 컴포넌트가 App.jsx이기 때문이다.
// 즉 우리가 어떤 컴포넌트를 화면에 띄우던, 항상 App.jsx를 거쳐야 한다.
// 그래서 path 별로 분기가 되는 Router.jsx를 App.jsx에 위치시킨다.
// 따라서 우리의 서비스를 이용하는 모든 사용자가 항상 "App.jsx → Router.jsx"를 거치도록 코드를 구현해주는 것이다.

// 4. 페이지 이동 테스트

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// useNavigate = hook

// 다른 페이지로 보내고자 할 때 사용할 수 있다.
// 보통 어떤 버튼을 누르면 페이지로 이동하거나, 어떤 컴포넌트를 눌렀을 때 페이지를 이동하게 만드는 훅이다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// useLocation = hook

// 현재 위치하고 있는 페이지의 여러 가지 정보를 추가적으로 얻을 수 있다.
// 이 정보들을 이용해서 페이지 안에서 조건부 렌더링에 사용하는 등, 여러 가지 용도로 활용할 수 있다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// Link = API

// Link는 html 태그 중에 a 태그의 기능을 대체하는 API이다.
// 만약 jsx에서 a 태그를 사용해야 한다면, 반드시 Link를 사용해서 구현해야 한다.
// 그 이유는 a 태그를 사용하면 페이지를 이동하면서 브라우저가 새로고침(refresh)되기 때문이다.
// 브라우저가 새로고침 되면 모든 컴포넌트가 다시 렌더링되야 하고, 또한 우리가 리덕스나 useState를 통해 메모리상에 구축해놓은 모든 상태값이 초기화 된다.
// 이것은 곧 성능에 악역향을 줄 수 있고, 불필요한 움직임이다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// Dynamic Route
// 동적 라우팅이라고도 말하는데, path에 유동적인 값을 넣어서 특정 페이지로 이동하게끔 구현하는 방법을 말한다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// useParams
// path의 있는 id 값을 조회할 수 있게 해주는 훅이다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 중첩된 라우트(Outlet)
// 특정 라우트 내에서 추가적인 라우트를 정의하는 방식을 말한다.
// 웹 애플리케이션에서 여러 계층의 UI를 구성할 때 유용하게 사용된다.
// 예를 들어, 사용자 대시보드에 여러 섹션이 있는 경우 각 섹션 별로 다른 경로를 설정할 수 있다.

// Outlet 컴포넌트
// Outlet 컴포넌트는 중첩 라우팅 환경에서 부모 라우트 내에 렌더링되어야 할 자식 라우트를 표시할 위치를 정의한다.
// 이는 부모 컴포넌트가 자식 경로의 렌더링 결과를 어디에 표시할 지 결정할 때 사용된다.
// Outlet을 사용하면 복잡한 애플리케이션의 라우트 구조를 더 명확하고 관리하기 쉽게 만들 수 있다.

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

import "./App.css";
import Router from "./shared/Router";

function App() {
    return (
        <div>
            <Router />
        </div>
    );
}

export default App;
